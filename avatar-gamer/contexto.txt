CONTEXTO:
El proyecto busca desarrollar una plataforma de acompañamiento digital entre usuarios y operadores humanos, enfocada en mejorar la experiencia emocional y social de los jugadores mediante interacción asistida. 
El sistema se construirá desde cero utilizando Django (backend) y Ionic Angular (frontend), con base de datos PostgreSQL. El desarrollo será modular y progresivo, comenzando por las funcionalidades esenciales: autenticación de usuarios, gestión de roles (operador y usuario), vínculo entre ambos, envío y respuesta de solicitudes de acompañamiento, y registro de consentimientos informados. 
El código debe ser claro, comentado y escalable, para permitir la integración posterior de JWT, logs de seguridad, chat y otros módulos inteligentes de comunicación.
Posteriormente al desarrollo de software. Se busca implementar la app Android en un celular que se conectará mediante cable a un arduino con un esqueleto robot.
La finalidad es que este robot pueda acompañar a las personas con problemas de aislamiento o discapacitados que no puedan asistir a sus trabajos presencialmente.
Por eso la aplicación debe comunicarse con el backend para cada procesamiento y consulta.

📘 LISTADO DE CASOS DE USO (CU) - PROYECTO AVATAR GAMER

CU-01: Iniciar sesión en el sistema.
CU-02: Validar credenciales de usuario.
CU-03: Registrar nuevos usuarios (operador o usuario).
CU-04: Asignar roles a los usuarios (admin, operador, usuario).
CU-05: Enlazar operador con usuario.
CU-06: Enviar solicitud de acompañamiento.
CU-07: Aceptar o rechazar solicitud de acompañamiento.
CU-08: Consultar historial de solicitudes.
CU-09: Registrar consentimiento informado.
CU-10: Ver lista de usuarios vinculados (solo operadores).
CU-11: Registrar logs de seguridad (inicio de sesión, acciones sensibles).
CU-12: Consultar métricas básicas (número de sesiones, usuarios activos, etc.).
CU-13: Gestionar sesiones de acompañamiento.
CU-14: Comunicar eventos del sistema al usuario (notificaciones).
CU-15: Cerrar sesión y limpiar sesión activa.

⚙️ LISTADO DE REQUERIMIENTOS FUNCIONALES (RF)

RF-01: El sistema debe permitir el inicio de sesión mediante nombre de usuario y contraseña.
RF-02: El sistema debe validar las credenciales contra la base de datos PostgreSQL.
RF-03: El sistema debe manejar roles (usuario, operador, administrador) con distintos permisos.
RF-04: El operador debe poder visualizar la lista de usuarios vinculados.
RF-05: El operador debe poder enviar solicitudes de acompañamiento a los usuarios.
RF-06: El usuario debe poder aceptar o rechazar solicitudes de acompañamiento.
RF-07: El sistema debe registrar el historial de solicitudes por usuario.
RF-08: El sistema debe registrar logs de seguridad (inicio/cierre de sesión, fallos, etc.).
RF-09: El sistema debe solicitar y almacenar el consentimiento informado del usuario.
RF-10: El sistema debe permitir cerrar sesión y eliminar la sesión activa.
RF-11: El sistema debe permitir consultar métricas básicas (usuarios activos, sesiones, solicitudes).

📋 LISTADO DE REQUERIMIENTOS NO FUNCIONALES (RNF)

RNF-01: El sistema debe estar desarrollado en Django REST Framework (backend) y Ionic Angular (frontend).
RNF-02: La base de datos principal debe ser PostgreSQL.
RNF-03: El sistema debe implementar validaciones y manejo de errores estándar en todos los endpoints.
RNF-04: El diseño debe ser modular, escalable y con código limpio y documentado.
RNF-05: El sistema debe permitir integración futura con módulos de IA, chat y comunicación por voz.
RNF-06: La interfaz debe ser adaptable para dispositivos móviles y escritorio.
RNF-07: Las respuestas de la API deben usar formato JSON.
RNF-08: El sistema debe cumplir con buenas prácticas de seguridad y gestión de datos personales.
RNF-09: El sistema debe permitir auditoría de accesos y trazabilidad de eventos.
RNF-10: El sistema debe tener un tiempo de respuesta menor a 2 segundos por solicitud.